2023-02-05 10:57:17,716 - mmcls - INFO - Environment info:
------------------------------------------------------------
sys.platform: linux
Python: 3.8.16 (default, Jan 17 2023, 23:13:24) [GCC 11.2.0]
CUDA available: True
GPU 0: NVIDIA GeForce RTX 3090
CUDA_HOME: /data/apps/cuda/11.1
NVCC: Cuda compilation tools, release 11.1, V11.1.74
GCC: gcc (GCC) 7.3.0
PyTorch: 1.10.0+cu111
PyTorch compiling details: PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.2.3 (Git Hash 7336ca9f055cf1bfa13efb658fe15dc9b41f0740)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.1
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.0.5
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.1, CUDNN_VERSION=8.0.5, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.10.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

TorchVision: 0.11.0+cu111
OpenCV: 4.7.0
MMCV: 1.7.0
MMCV Compiler: GCC 7.3
MMCV CUDA Compiler: 11.1
MMClassification: 0.25.0+
------------------------------------------------------------

2023-02-05 10:57:17,717 - mmcls - INFO - Distributed training: False
2023-02-05 10:57:17,815 - mmcls - INFO - Config:
model = dict(
    type='ImageClassifier',
    backbone=dict(
        type='ResNet',
        depth=18,
        num_stages=4,
        out_indices=(3, ),
        style='pytorch'),
    neck=dict(type='GlobalAveragePooling'),
    head=dict(
        type='LinearClsHead',
        num_classes=5,
        in_channels=512,
        loss=dict(type='CrossEntropyLoss', loss_weight=1.0),
        topk=(1, )))
dataset_type = 'ImageNet'
img_norm_cfg = dict(
    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='RandomResizedCrop', size=224),
    dict(type='RandomFlip', flip_prob=0.5, direction='horizontal'),
    dict(
        type='Normalize',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        to_rgb=True),
    dict(type='ImageToTensor', keys=['img']),
    dict(type='ToTensor', keys=['gt_label']),
    dict(type='Collect', keys=['img', 'gt_label'])
]
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='Resize', size=(256, -1)),
    dict(type='CenterCrop', crop_size=224),
    dict(
        type='Normalize',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        to_rgb=True),
    dict(type='ImageToTensor', keys=['img']),
    dict(type='Collect', keys=['img'])
]
data = dict(
    samples_per_gpu=32,
    workers_per_gpu=2,
    train=dict(
        type='ImageNet',
        data_prefix='data/flower_dataset/train',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='RandomResizedCrop', size=224),
            dict(type='RandomFlip', flip_prob=0.5, direction='horizontal'),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='ToTensor', keys=['gt_label']),
            dict(type='Collect', keys=['img', 'gt_label'])
        ],
        ann_file='data/flower_dataset/train.txt',
        classes='data/flower_dataset/classes.txt'),
    val=dict(
        type='ImageNet',
        data_prefix='data/flower_dataset/val',
        ann_file='data/flower_dataset/val.txt',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='Resize', size=(256, -1)),
            dict(type='CenterCrop', crop_size=224),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ],
        classes='data/flower_dataset/classes.txt'),
    test=dict(
        type='ImageNet',
        data_prefix='data/imagenet/val',
        ann_file='data/imagenet/meta/val.txt',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='Resize', size=(256, -1)),
            dict(type='CenterCrop', crop_size=224),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ]))
evaluation = dict(interval=1, metric='accuracy')
checkpoint_config = dict(interval=1)
log_config = dict(interval=100, hooks=[dict(type='TextLoggerHook')])
dist_params = dict(backend='nccl')
log_level = 'INFO'
load_from = '~/run/mmclassification-master/configs/resnet18/resnet18_8xb32_in1k_20210831-fbbb1da6.pth'
resume_from = None
workflow = [('train', 1)]
optimizer = dict(type='SGD', lr=0.01, momentum=0.9, weight_decay=0.0001)
optimizer_config = dict(grad_clip=None)
lr_config = dict(policy='step', step=[1])
runner = dict(type='EpochBasedRunner', max_epochs=100)
work_dir = 'configs/work'
gpu_ids = [0]

2023-02-05 10:57:17,817 - mmcls - INFO - Set random seed to 2144266818, deterministic: False
2023-02-05 10:57:17,898 - mmcls - INFO - initialize ResNet with init_cfg [{'type': 'Kaiming', 'layer': ['Conv2d']}, {'type': 'Constant', 'val': 1, 'layer': ['_BatchNorm', 'GroupNorm']}]
2023-02-05 10:57:17,990 - mmcls - INFO - initialize LinearClsHead with init_cfg {'type': 'Normal', 'layer': 'Linear', 'std': 0.01}
Name of parameter - Initialization information

backbone.conv1.weight - torch.Size([64, 3, 7, 7]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.conv1.weight - torch.Size([64, 64, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.0.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.conv2.weight - torch.Size([64, 64, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.0.bn2.weight - torch.Size([64]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer1.0.bn2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.1.conv1.weight - torch.Size([64, 64, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.1.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.1.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.1.conv2.weight - torch.Size([64, 64, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.1.bn2.weight - torch.Size([64]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer1.1.bn2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.conv1.weight - torch.Size([128, 64, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.0.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.conv2.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.0.bn2.weight - torch.Size([128]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer2.0.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.downsample.0.weight - torch.Size([128, 64, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.0.downsample.1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.downsample.1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.1.conv1.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.1.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.1.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.1.conv2.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.1.bn2.weight - torch.Size([128]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer2.1.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.conv1.weight - torch.Size([256, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.0.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.0.bn2.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.0.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.downsample.0.weight - torch.Size([256, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.0.downsample.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.downsample.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.1.conv1.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.1.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.1.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.1.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.1.bn2.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.1.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.conv1.weight - torch.Size([512, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.0.bn1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.bn1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.conv2.weight - torch.Size([512, 512, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.0.bn2.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer4.0.bn2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.downsample.0.weight - torch.Size([512, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.0.downsample.1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.downsample.1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.1.conv1.weight - torch.Size([512, 512, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.1.bn1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.1.bn1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.1.conv2.weight - torch.Size([512, 512, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.1.bn2.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer4.1.bn2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

head.fc.weight - torch.Size([5, 512]): 
NormalInit: mean=0, std=0.01, bias=0 

head.fc.bias - torch.Size([5]): 
NormalInit: mean=0, std=0.01, bias=0 
2023-02-05 10:57:23,170 - mmcls - INFO - load checkpoint from local path: ~/run/mmclassification-master/configs/resnet18/resnet18_8xb32_in1k_20210831-fbbb1da6.pth
2023-02-05 10:57:23,349 - mmcls - WARNING - The model and loaded state dict do not match exactly

size mismatch for head.fc.weight: copying a param with shape torch.Size([1000, 512]) from checkpoint, the shape in current model is torch.Size([5, 512]).
size mismatch for head.fc.bias: copying a param with shape torch.Size([1000]) from checkpoint, the shape in current model is torch.Size([5]).
2023-02-05 10:57:23,350 - mmcls - INFO - Start running, host: scz0ask@g0099, work_dir: /data/run01/scz0ask/mmclassification-master/configs/work
2023-02-05 10:57:23,350 - mmcls - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) StepLrUpdaterHook                  
(NORMAL      ) CheckpointHook                     
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) StepLrUpdaterHook                  
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_iter:
(VERY_HIGH   ) StepLrUpdaterHook                  
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
 -------------------- 
after_train_iter:
(ABOVE_NORMAL) OptimizerHook                      
(NORMAL      ) CheckpointHook                     
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) CheckpointHook                     
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_epoch:
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_epoch:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_run:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
2023-02-05 10:57:23,350 - mmcls - INFO - workflow: [('train', 1)], max: 100 epochs
2023-02-05 10:57:23,350 - mmcls - INFO - Checkpoints will be saved to /data/run01/scz0ask/mmclassification-master/configs/work by HardDiskBackend.
2023-02-05 10:57:34,280 - mmcls - INFO - Saving checkpoint at 1 epochs
2023-02-05 10:57:35,838 - mmcls - INFO - Epoch(val) [1][18]	accuracy_top-1: 71.3287, accuracy_top-5: 100.0000
2023-02-05 10:57:41,219 - mmcls - INFO - Saving checkpoint at 2 epochs
2023-02-05 10:57:42,199 - mmcls - INFO - Epoch(val) [2][18]	accuracy_top-1: 91.4336, accuracy_top-5: 100.0000
2023-02-05 10:57:47,555 - mmcls - INFO - Saving checkpoint at 3 epochs
2023-02-05 10:57:48,531 - mmcls - INFO - Epoch(val) [3][18]	accuracy_top-1: 91.9580, accuracy_top-5: 100.0000
2023-02-05 10:57:53,955 - mmcls - INFO - Saving checkpoint at 4 epochs
2023-02-05 10:57:54,933 - mmcls - INFO - Epoch(val) [4][18]	accuracy_top-1: 92.6573, accuracy_top-5: 100.0000
2023-02-05 10:58:00,293 - mmcls - INFO - Saving checkpoint at 5 epochs
2023-02-05 10:58:01,274 - mmcls - INFO - Epoch(val) [5][18]	accuracy_top-1: 92.1329, accuracy_top-5: 100.0000
2023-02-05 10:58:06,637 - mmcls - INFO - Saving checkpoint at 6 epochs
2023-02-05 10:58:07,619 - mmcls - INFO - Epoch(val) [6][18]	accuracy_top-1: 93.0070, accuracy_top-5: 100.0000
2023-02-05 10:58:13,009 - mmcls - INFO - Saving checkpoint at 7 epochs
2023-02-05 10:58:13,992 - mmcls - INFO - Epoch(val) [7][18]	accuracy_top-1: 93.5315, accuracy_top-5: 100.0000
2023-02-05 10:58:19,345 - mmcls - INFO - Saving checkpoint at 8 epochs
2023-02-05 10:58:20,329 - mmcls - INFO - Epoch(val) [8][18]	accuracy_top-1: 92.6573, accuracy_top-5: 100.0000
2023-02-05 10:58:25,751 - mmcls - INFO - Saving checkpoint at 9 epochs
2023-02-05 10:58:26,733 - mmcls - INFO - Epoch(val) [9][18]	accuracy_top-1: 93.5315, accuracy_top-5: 100.0000
2023-02-05 10:58:32,144 - mmcls - INFO - Saving checkpoint at 10 epochs
2023-02-05 10:58:33,116 - mmcls - INFO - Epoch(val) [10][18]	accuracy_top-1: 93.3566, accuracy_top-5: 100.0000
2023-02-05 10:58:38,453 - mmcls - INFO - Saving checkpoint at 11 epochs
2023-02-05 10:58:39,436 - mmcls - INFO - Epoch(val) [11][18]	accuracy_top-1: 92.8322, accuracy_top-5: 100.0000
2023-02-05 10:58:44,799 - mmcls - INFO - Saving checkpoint at 12 epochs
2023-02-05 10:58:45,780 - mmcls - INFO - Epoch(val) [12][18]	accuracy_top-1: 94.0559, accuracy_top-5: 100.0000
2023-02-05 10:58:51,194 - mmcls - INFO - Saving checkpoint at 13 epochs
2023-02-05 10:58:52,180 - mmcls - INFO - Epoch(val) [13][18]	accuracy_top-1: 93.8811, accuracy_top-5: 100.0000
2023-02-05 10:58:57,560 - mmcls - INFO - Saving checkpoint at 14 epochs
2023-02-05 10:58:58,540 - mmcls - INFO - Epoch(val) [14][18]	accuracy_top-1: 94.0559, accuracy_top-5: 100.0000
2023-02-05 10:59:03,899 - mmcls - INFO - Saving checkpoint at 15 epochs
2023-02-05 10:59:04,879 - mmcls - INFO - Epoch(val) [15][18]	accuracy_top-1: 94.4056, accuracy_top-5: 100.0000
2023-02-05 10:59:10,219 - mmcls - INFO - Saving checkpoint at 16 epochs
2023-02-05 10:59:11,199 - mmcls - INFO - Epoch(val) [16][18]	accuracy_top-1: 94.0559, accuracy_top-5: 100.0000
2023-02-05 10:59:16,585 - mmcls - INFO - Saving checkpoint at 17 epochs
2023-02-05 10:59:17,565 - mmcls - INFO - Epoch(val) [17][18]	accuracy_top-1: 93.0070, accuracy_top-5: 100.0000
2023-02-05 10:59:22,914 - mmcls - INFO - Saving checkpoint at 18 epochs
2023-02-05 10:59:23,900 - mmcls - INFO - Epoch(val) [18][18]	accuracy_top-1: 94.2308, accuracy_top-5: 100.0000
2023-02-05 10:59:29,266 - mmcls - INFO - Saving checkpoint at 19 epochs
2023-02-05 10:59:30,245 - mmcls - INFO - Epoch(val) [19][18]	accuracy_top-1: 94.5804, accuracy_top-5: 100.0000
2023-02-05 10:59:35,611 - mmcls - INFO - Saving checkpoint at 20 epochs
2023-02-05 10:59:36,597 - mmcls - INFO - Epoch(val) [20][18]	accuracy_top-1: 94.4056, accuracy_top-5: 100.0000
2023-02-05 10:59:42,045 - mmcls - INFO - Saving checkpoint at 21 epochs
2023-02-05 10:59:43,034 - mmcls - INFO - Epoch(val) [21][18]	accuracy_top-1: 94.2308, accuracy_top-5: 100.0000
2023-02-05 10:59:48,424 - mmcls - INFO - Saving checkpoint at 22 epochs
2023-02-05 10:59:49,402 - mmcls - INFO - Epoch(val) [22][18]	accuracy_top-1: 95.1049, accuracy_top-5: 100.0000
2023-02-05 10:59:54,794 - mmcls - INFO - Saving checkpoint at 23 epochs
2023-02-05 10:59:55,778 - mmcls - INFO - Epoch(val) [23][18]	accuracy_top-1: 94.4056, accuracy_top-5: 100.0000
2023-02-05 11:00:01,190 - mmcls - INFO - Saving checkpoint at 24 epochs
2023-02-05 11:00:02,171 - mmcls - INFO - Epoch(val) [24][18]	accuracy_top-1: 94.4056, accuracy_top-5: 100.0000
2023-02-05 11:00:07,597 - mmcls - INFO - Saving checkpoint at 25 epochs
2023-02-05 11:00:08,574 - mmcls - INFO - Epoch(val) [25][18]	accuracy_top-1: 94.4056, accuracy_top-5: 100.0000
2023-02-05 11:00:13,976 - mmcls - INFO - Saving checkpoint at 26 epochs
2023-02-05 11:00:14,959 - mmcls - INFO - Epoch(val) [26][18]	accuracy_top-1: 94.0559, accuracy_top-5: 100.0000
2023-02-05 11:00:20,332 - mmcls - INFO - Saving checkpoint at 27 epochs
2023-02-05 11:00:21,313 - mmcls - INFO - Epoch(val) [27][18]	accuracy_top-1: 94.9301, accuracy_top-5: 100.0000
2023-02-05 11:00:26,763 - mmcls - INFO - Saving checkpoint at 28 epochs
2023-02-05 11:00:27,750 - mmcls - INFO - Epoch(val) [28][18]	accuracy_top-1: 94.9301, accuracy_top-5: 100.0000
2023-02-05 11:00:33,184 - mmcls - INFO - Saving checkpoint at 29 epochs
2023-02-05 11:00:34,168 - mmcls - INFO - Epoch(val) [29][18]	accuracy_top-1: 95.6294, accuracy_top-5: 100.0000
2023-02-05 11:00:39,588 - mmcls - INFO - Saving checkpoint at 30 epochs
2023-02-05 11:00:40,563 - mmcls - INFO - Epoch(val) [30][18]	accuracy_top-1: 94.4056, accuracy_top-5: 100.0000
2023-02-05 11:00:45,968 - mmcls - INFO - Saving checkpoint at 31 epochs
2023-02-05 11:00:46,976 - mmcls - INFO - Epoch(val) [31][18]	accuracy_top-1: 94.5804, accuracy_top-5: 100.0000
2023-02-05 11:00:52,434 - mmcls - INFO - Saving checkpoint at 32 epochs
2023-02-05 11:00:53,448 - mmcls - INFO - Epoch(val) [32][18]	accuracy_top-1: 94.7552, accuracy_top-5: 100.0000
2023-02-05 11:00:58,938 - mmcls - INFO - Saving checkpoint at 33 epochs
2023-02-05 11:00:59,924 - mmcls - INFO - Epoch(val) [33][18]	accuracy_top-1: 94.7552, accuracy_top-5: 100.0000
2023-02-05 11:01:05,318 - mmcls - INFO - Saving checkpoint at 34 epochs
2023-02-05 11:01:06,311 - mmcls - INFO - Epoch(val) [34][18]	accuracy_top-1: 95.8042, accuracy_top-5: 100.0000
2023-02-05 11:01:11,719 - mmcls - INFO - Saving checkpoint at 35 epochs
2023-02-05 11:01:12,705 - mmcls - INFO - Epoch(val) [35][18]	accuracy_top-1: 95.1049, accuracy_top-5: 100.0000
2023-02-05 11:01:18,075 - mmcls - INFO - Saving checkpoint at 36 epochs
2023-02-05 11:01:19,054 - mmcls - INFO - Epoch(val) [36][18]	accuracy_top-1: 95.6294, accuracy_top-5: 100.0000
2023-02-05 11:01:24,530 - mmcls - INFO - Saving checkpoint at 37 epochs
2023-02-05 11:01:25,522 - mmcls - INFO - Epoch(val) [37][18]	accuracy_top-1: 95.6294, accuracy_top-5: 100.0000
2023-02-05 11:01:30,896 - mmcls - INFO - Saving checkpoint at 38 epochs
2023-02-05 11:01:31,875 - mmcls - INFO - Epoch(val) [38][18]	accuracy_top-1: 94.5804, accuracy_top-5: 100.0000
2023-02-05 11:01:37,248 - mmcls - INFO - Saving checkpoint at 39 epochs
2023-02-05 11:01:38,234 - mmcls - INFO - Epoch(val) [39][18]	accuracy_top-1: 95.2797, accuracy_top-5: 100.0000
2023-02-05 11:01:43,645 - mmcls - INFO - Saving checkpoint at 40 epochs
2023-02-05 11:01:44,619 - mmcls - INFO - Epoch(val) [40][18]	accuracy_top-1: 95.8042, accuracy_top-5: 100.0000
2023-02-05 11:01:50,002 - mmcls - INFO - Saving checkpoint at 41 epochs
2023-02-05 11:01:50,991 - mmcls - INFO - Epoch(val) [41][18]	accuracy_top-1: 95.6294, accuracy_top-5: 100.0000
2023-02-05 11:01:56,388 - mmcls - INFO - Saving checkpoint at 42 epochs
2023-02-05 11:01:57,381 - mmcls - INFO - Epoch(val) [42][18]	accuracy_top-1: 95.4545, accuracy_top-5: 100.0000
2023-02-05 11:02:02,778 - mmcls - INFO - Saving checkpoint at 43 epochs
2023-02-05 11:02:03,760 - mmcls - INFO - Epoch(val) [43][18]	accuracy_top-1: 95.8042, accuracy_top-5: 100.0000
2023-02-05 11:02:09,158 - mmcls - INFO - Saving checkpoint at 44 epochs
2023-02-05 11:02:10,130 - mmcls - INFO - Epoch(val) [44][18]	accuracy_top-1: 95.4545, accuracy_top-5: 100.0000
2023-02-05 11:02:15,521 - mmcls - INFO - Saving checkpoint at 45 epochs
2023-02-05 11:02:16,504 - mmcls - INFO - Epoch(val) [45][18]	accuracy_top-1: 94.5804, accuracy_top-5: 100.0000
2023-02-05 11:02:21,928 - mmcls - INFO - Saving checkpoint at 46 epochs
2023-02-05 11:02:22,914 - mmcls - INFO - Epoch(val) [46][18]	accuracy_top-1: 94.9301, accuracy_top-5: 100.0000
2023-02-05 11:02:28,343 - mmcls - INFO - Saving checkpoint at 47 epochs
2023-02-05 11:02:29,335 - mmcls - INFO - Epoch(val) [47][18]	accuracy_top-1: 95.1049, accuracy_top-5: 100.0000
2023-02-05 11:02:34,702 - mmcls - INFO - Saving checkpoint at 48 epochs
2023-02-05 11:02:35,681 - mmcls - INFO - Epoch(val) [48][18]	accuracy_top-1: 94.4056, accuracy_top-5: 100.0000
2023-02-05 11:02:41,105 - mmcls - INFO - Saving checkpoint at 49 epochs
2023-02-05 11:02:42,080 - mmcls - INFO - Epoch(val) [49][18]	accuracy_top-1: 94.9301, accuracy_top-5: 100.0000
2023-02-05 11:02:47,458 - mmcls - INFO - Saving checkpoint at 50 epochs
2023-02-05 11:02:48,450 - mmcls - INFO - Epoch(val) [50][18]	accuracy_top-1: 95.1049, accuracy_top-5: 100.0000
2023-02-05 11:02:53,865 - mmcls - INFO - Saving checkpoint at 51 epochs
2023-02-05 11:02:54,849 - mmcls - INFO - Epoch(val) [51][18]	accuracy_top-1: 95.6294, accuracy_top-5: 100.0000
2023-02-05 11:03:00,265 - mmcls - INFO - Saving checkpoint at 52 epochs
2023-02-05 11:03:01,252 - mmcls - INFO - Epoch(val) [52][18]	accuracy_top-1: 94.9301, accuracy_top-5: 100.0000
2023-02-05 11:03:06,642 - mmcls - INFO - Saving checkpoint at 53 epochs
2023-02-05 11:03:07,628 - mmcls - INFO - Epoch(val) [53][18]	accuracy_top-1: 94.9301, accuracy_top-5: 100.0000
2023-02-05 11:03:13,049 - mmcls - INFO - Saving checkpoint at 54 epochs
2023-02-05 11:03:14,038 - mmcls - INFO - Epoch(val) [54][18]	accuracy_top-1: 95.6294, accuracy_top-5: 100.0000
2023-02-05 11:03:19,454 - mmcls - INFO - Saving checkpoint at 55 epochs
2023-02-05 11:03:20,506 - mmcls - INFO - Epoch(val) [55][18]	accuracy_top-1: 95.2797, accuracy_top-5: 100.0000
2023-02-05 11:03:25,904 - mmcls - INFO - Saving checkpoint at 56 epochs
2023-02-05 11:03:32,009 - mmcls - INFO - Epoch(val) [56][18]	accuracy_top-1: 94.2308, accuracy_top-5: 100.0000
2023-02-05 11:03:37,401 - mmcls - INFO - Saving checkpoint at 57 epochs
2023-02-05 11:03:38,389 - mmcls - INFO - Epoch(val) [57][18]	accuracy_top-1: 94.7552, accuracy_top-5: 100.0000
2023-02-05 11:03:43,753 - mmcls - INFO - Saving checkpoint at 58 epochs
2023-02-05 11:03:44,744 - mmcls - INFO - Epoch(val) [58][18]	accuracy_top-1: 95.6294, accuracy_top-5: 100.0000
2023-02-05 11:03:50,096 - mmcls - INFO - Saving checkpoint at 59 epochs
2023-02-05 11:03:51,084 - mmcls - INFO - Epoch(val) [59][18]	accuracy_top-1: 94.5804, accuracy_top-5: 100.0000
2023-02-05 11:03:56,465 - mmcls - INFO - Saving checkpoint at 60 epochs
2023-02-05 11:03:57,458 - mmcls - INFO - Epoch(val) [60][18]	accuracy_top-1: 93.8811, accuracy_top-5: 100.0000
2023-02-05 11:04:02,850 - mmcls - INFO - Saving checkpoint at 61 epochs
2023-02-05 11:04:03,844 - mmcls - INFO - Epoch(val) [61][18]	accuracy_top-1: 93.5315, accuracy_top-5: 100.0000
2023-02-05 11:04:09,229 - mmcls - INFO - Saving checkpoint at 62 epochs
2023-02-05 11:04:10,215 - mmcls - INFO - Epoch(val) [62][18]	accuracy_top-1: 94.4056, accuracy_top-5: 100.0000
2023-02-05 11:04:15,650 - mmcls - INFO - Saving checkpoint at 63 epochs
2023-02-05 11:04:16,632 - mmcls - INFO - Epoch(val) [63][18]	accuracy_top-1: 94.7552, accuracy_top-5: 100.0000
2023-02-05 11:04:22,015 - mmcls - INFO - Saving checkpoint at 64 epochs
2023-02-05 11:04:22,997 - mmcls - INFO - Epoch(val) [64][18]	accuracy_top-1: 94.4056, accuracy_top-5: 100.0000
2023-02-05 11:04:28,401 - mmcls - INFO - Saving checkpoint at 65 epochs
2023-02-05 11:04:29,381 - mmcls - INFO - Epoch(val) [65][18]	accuracy_top-1: 94.9301, accuracy_top-5: 100.0000
2023-02-05 11:04:34,741 - mmcls - INFO - Saving checkpoint at 66 epochs
2023-02-05 11:04:35,730 - mmcls - INFO - Epoch(val) [66][18]	accuracy_top-1: 94.2308, accuracy_top-5: 100.0000
2023-02-05 11:04:41,134 - mmcls - INFO - Saving checkpoint at 67 epochs
2023-02-05 11:04:42,114 - mmcls - INFO - Epoch(val) [67][18]	accuracy_top-1: 93.5315, accuracy_top-5: 100.0000
2023-02-05 11:04:47,490 - mmcls - INFO - Saving checkpoint at 68 epochs
2023-02-05 11:04:48,477 - mmcls - INFO - Epoch(val) [68][18]	accuracy_top-1: 93.7063, accuracy_top-5: 100.0000
2023-02-05 11:04:53,917 - mmcls - INFO - Saving checkpoint at 69 epochs
2023-02-05 11:04:54,903 - mmcls - INFO - Epoch(val) [69][18]	accuracy_top-1: 94.0559, accuracy_top-5: 100.0000
2023-02-05 11:05:00,278 - mmcls - INFO - Saving checkpoint at 70 epochs
2023-02-05 11:05:01,265 - mmcls - INFO - Epoch(val) [70][18]	accuracy_top-1: 94.7552, accuracy_top-5: 100.0000
2023-02-05 11:05:06,651 - mmcls - INFO - Saving checkpoint at 71 epochs
2023-02-05 11:05:07,644 - mmcls - INFO - Epoch(val) [71][18]	accuracy_top-1: 94.2308, accuracy_top-5: 100.0000
2023-02-05 11:05:13,092 - mmcls - INFO - Saving checkpoint at 72 epochs
2023-02-05 11:05:14,137 - mmcls - INFO - Epoch(val) [72][18]	accuracy_top-1: 94.7552, accuracy_top-5: 100.0000
2023-02-05 11:05:19,525 - mmcls - INFO - Saving checkpoint at 73 epochs
2023-02-05 11:05:20,513 - mmcls - INFO - Epoch(val) [73][18]	accuracy_top-1: 93.5315, accuracy_top-5: 100.0000
2023-02-05 11:05:25,941 - mmcls - INFO - Saving checkpoint at 74 epochs
2023-02-05 11:05:26,931 - mmcls - INFO - Epoch(val) [74][18]	accuracy_top-1: 94.4056, accuracy_top-5: 100.0000
2023-02-05 11:05:32,309 - mmcls - INFO - Saving checkpoint at 75 epochs
2023-02-05 11:05:33,298 - mmcls - INFO - Epoch(val) [75][18]	accuracy_top-1: 94.4056, accuracy_top-5: 100.0000
2023-02-05 11:05:38,732 - mmcls - INFO - Saving checkpoint at 76 epochs
2023-02-05 11:05:39,725 - mmcls - INFO - Epoch(val) [76][18]	accuracy_top-1: 93.8811, accuracy_top-5: 100.0000
2023-02-05 11:05:45,169 - mmcls - INFO - Saving checkpoint at 77 epochs
2023-02-05 11:05:46,167 - mmcls - INFO - Epoch(val) [77][18]	accuracy_top-1: 94.2308, accuracy_top-5: 100.0000
2023-02-05 11:05:51,605 - mmcls - INFO - Saving checkpoint at 78 epochs
2023-02-05 11:05:52,592 - mmcls - INFO - Epoch(val) [78][18]	accuracy_top-1: 94.2308, accuracy_top-5: 100.0000
2023-02-05 11:05:58,018 - mmcls - INFO - Saving checkpoint at 79 epochs
2023-02-05 11:05:59,020 - mmcls - INFO - Epoch(val) [79][18]	accuracy_top-1: 94.5804, accuracy_top-5: 100.0000
2023-02-05 11:06:04,462 - mmcls - INFO - Saving checkpoint at 80 epochs
2023-02-05 11:06:05,452 - mmcls - INFO - Epoch(val) [80][18]	accuracy_top-1: 95.8042, accuracy_top-5: 100.0000
2023-02-05 11:06:10,820 - mmcls - INFO - Saving checkpoint at 81 epochs
2023-02-05 11:06:11,813 - mmcls - INFO - Epoch(val) [81][18]	accuracy_top-1: 95.4545, accuracy_top-5: 100.0000
2023-02-05 11:06:17,245 - mmcls - INFO - Saving checkpoint at 82 epochs
2023-02-05 11:06:18,234 - mmcls - INFO - Epoch(val) [82][18]	accuracy_top-1: 94.9301, accuracy_top-5: 100.0000
2023-02-05 11:06:23,610 - mmcls - INFO - Saving checkpoint at 83 epochs
2023-02-05 11:06:24,591 - mmcls - INFO - Epoch(val) [83][18]	accuracy_top-1: 94.5804, accuracy_top-5: 100.0000
2023-02-05 11:06:29,986 - mmcls - INFO - Saving checkpoint at 84 epochs
2023-02-05 11:06:30,974 - mmcls - INFO - Epoch(val) [84][18]	accuracy_top-1: 94.7552, accuracy_top-5: 100.0000
2023-02-05 11:06:36,384 - mmcls - INFO - Saving checkpoint at 85 epochs
2023-02-05 11:06:37,454 - mmcls - INFO - Epoch(val) [85][18]	accuracy_top-1: 94.4056, accuracy_top-5: 100.0000
2023-02-05 11:06:42,852 - mmcls - INFO - Saving checkpoint at 86 epochs
2023-02-05 11:06:43,845 - mmcls - INFO - Epoch(val) [86][18]	accuracy_top-1: 94.7552, accuracy_top-5: 100.0000
2023-02-05 11:06:49,261 - mmcls - INFO - Saving checkpoint at 87 epochs
2023-02-05 11:06:50,263 - mmcls - INFO - Epoch(val) [87][18]	accuracy_top-1: 94.9301, accuracy_top-5: 100.0000
2023-02-05 11:06:55,673 - mmcls - INFO - Saving checkpoint at 88 epochs
2023-02-05 11:06:56,664 - mmcls - INFO - Epoch(val) [88][18]	accuracy_top-1: 94.4056, accuracy_top-5: 100.0000
2023-02-05 11:07:02,058 - mmcls - INFO - Saving checkpoint at 89 epochs
2023-02-05 11:07:03,047 - mmcls - INFO - Epoch(val) [89][18]	accuracy_top-1: 95.4545, accuracy_top-5: 100.0000
2023-02-05 11:07:08,442 - mmcls - INFO - Saving checkpoint at 90 epochs
2023-02-05 11:07:09,431 - mmcls - INFO - Epoch(val) [90][18]	accuracy_top-1: 94.9301, accuracy_top-5: 100.0000
2023-02-05 11:07:14,861 - mmcls - INFO - Saving checkpoint at 91 epochs
2023-02-05 11:07:15,950 - mmcls - INFO - Epoch(val) [91][18]	accuracy_top-1: 95.1049, accuracy_top-5: 100.0000
2023-02-05 11:07:21,320 - mmcls - INFO - Saving checkpoint at 92 epochs
2023-02-05 11:07:22,298 - mmcls - INFO - Epoch(val) [92][18]	accuracy_top-1: 95.6294, accuracy_top-5: 100.0000
2023-02-05 11:07:27,687 - mmcls - INFO - Saving checkpoint at 93 epochs
2023-02-05 11:07:28,681 - mmcls - INFO - Epoch(val) [93][18]	accuracy_top-1: 94.7552, accuracy_top-5: 100.0000
2023-02-05 11:07:34,074 - mmcls - INFO - Saving checkpoint at 94 epochs
2023-02-05 11:07:35,062 - mmcls - INFO - Epoch(val) [94][18]	accuracy_top-1: 95.1049, accuracy_top-5: 100.0000
2023-02-05 11:07:40,496 - mmcls - INFO - Saving checkpoint at 95 epochs
2023-02-05 11:07:41,492 - mmcls - INFO - Epoch(val) [95][18]	accuracy_top-1: 95.6294, accuracy_top-5: 100.0000
2023-02-05 11:07:46,959 - mmcls - INFO - Saving checkpoint at 96 epochs
2023-02-05 11:07:48,252 - mmcls - INFO - Epoch(val) [96][18]	accuracy_top-1: 96.3287, accuracy_top-5: 100.0000
2023-02-05 11:07:53,679 - mmcls - INFO - Saving checkpoint at 97 epochs
2023-02-05 11:07:54,675 - mmcls - INFO - Epoch(val) [97][18]	accuracy_top-1: 95.4545, accuracy_top-5: 100.0000
2023-02-05 11:08:00,099 - mmcls - INFO - Saving checkpoint at 98 epochs
2023-02-05 11:08:01,092 - mmcls - INFO - Epoch(val) [98][18]	accuracy_top-1: 95.1049, accuracy_top-5: 100.0000
2023-02-05 11:08:06,499 - mmcls - INFO - Saving checkpoint at 99 epochs
2023-02-05 11:08:07,486 - mmcls - INFO - Epoch(val) [99][18]	accuracy_top-1: 95.2797, accuracy_top-5: 100.0000
2023-02-05 11:08:12,939 - mmcls - INFO - Saving checkpoint at 100 epochs
2023-02-05 11:08:13,938 - mmcls - INFO - Epoch(val) [100][18]	accuracy_top-1: 94.5804, accuracy_top-5: 100.0000
